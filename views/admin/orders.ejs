

<%- include('../partials/admin/header') %>

<style>
  :root {
      --primary-color: #3498db;
      --secondary-color: #2c3e50;
      --success-color: #2ecc71;
      --danger-color: #e74c3c;
      --info-color: #3498db;
      --light-gray: #ecf0f1;
    }
    .order-table th, .order-table td {
        vertical-align: middle;
    }
    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-weight: 500;
    }
    .order-actions .btn {
        margin: 0 2px;
    }
    .item-image {
      width: 100%;
      height: 120px;
      object-fit: cover;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease;
    }
</style>

<div class="container-fluid px-4">
    <h1 class="mt-4">Order Management</h1>

    <br>
    

    <div class="card mb-4">
    

        <div class="card mb-0">
            <div class="card-body" style="width: 25%;">    
              
                <h5 class="mb-0">Listed: <%= orders.length %></h5>

              <form action="/admin/orders/" method="get" class="mb-0" id="searchForm">
                <div class="input-group">

                  <input id="searchInput" type="text" class="form-control" placeholder="Search" name="search" >
                  <button 
                  class="btn btn-secondary" type="button" id="clearSearch">
                    <i class="fa-solid fa-trash"></i>
                    </button>      
                </div> 
                <div class="form-group">
                    <label for="fromDate">From Date:</label>
                    <input type="date" name="fromDate" id="fromDate" class="form-control" value="<%= fromDate %>">
                  </div>
                  
                  <div class="form-group">
                    <label for="toDate">To Date:</label>
                    <input type="date" name="toDate" id="toDate" class="form-control" value="<%= toDate %>">
                  </div>        
        
            </form>               

            </div>
          </div>

      
          <div  style="display: flex; gap: 10px; flex-wrap: wrap; margin-left: 20px; margin-top: 10px;">
            <label><input  checked type="checkbox" name="status[]" value="all" <%= status.includes('all') ? 'checked' : '' %>> All</label>
            <label><input type="checkbox" name="status[]" value="Pending" <%= status.includes('pending') ? 'checked' : '' %>> Pending</label>
            <label><input type="checkbox" name="status[]" value="Confirmed" <%= status.includes('confirmed') ? 'checked' : '' %>> Confirmed</label>
            <label><input type="checkbox" name="status[]" value="Shipped" <%= status.includes('shipped') ? 'checked' : '' %>> Shipped</label>
            <label><input type="checkbox" name="status[]" value="Delivered" <%= status.includes('delivered') ? 'checked' : '' %>> Delivered</label>
            <label><input type="checkbox" name="status[]" value="Cancelled" <%= status.includes('cancelled') ? 'checked' : '' %>> Cancelled</label>
            <label><input type="checkbox" name="status[]" value="Return_Request" <%= status.includes('return_request') ? 'checked' : '' %>> Return Request</label>
            <label><input type="checkbox" name="status[]" value="Returned" <%= status.includes('returned') ? 'checked' : '' %>> Returned</label>
          </div>

          <button id="filterBtn" type="submit" class="btn btn-primary"  style="margin-left: 20px; width: 150px; display: none;">Filter</button>
          

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped order-table">
                    <thead  style="background-color: #46B0CD; color: white; font-size: 22px; ">
                        <tr>
                            <th>Date</th>
                            <th>Product</th>
                            <th>Customer</th>
                            <th>Order ID</th>    
                            <th>Qty</th>
                            <th>Price</th>   
                            <th>Delivery Charge</th>                        
                            <th>Final Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr>
                                <td style="font-size: 18px;"><%= new Date(order.createdOn).toLocaleString() %></td>
                               
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img src=" /<%= order.product.photos[0] %>"                                        
                                             style="width: 100px; height: 100px; "
                                             class="me-2"
                                             >
                                        <span><%= order.product.name %></span>
                                    </div>

                                </td>
                                <td><%= order.address.name %></td>
                                <td>#<%= order.orderId %></td>

                                <td><%= order.qty %></td>

                                <td>₹<%= order.price %></td>
                                <td>₹<%= order.deliveryCharge %></td>

                                <td style="font-size: 18px;">₹<%= Math.round(order.totalPrice) %></td>
                                <td>

                                   
                                    <span class="status-badge" style="<%= 
                                    order.status === 'Pending' ? 'color: white; background-color: #3498db;' :
                                    order.status === 'Confirmed' ? 'color: white; background-color: blue;' :
                                    order.status === 'Shipped' ? 'color: white; background-color: orange;' :
                                    order.status === 'Delivered' ? 'color: white; background-color: green;' :
                                    order.status === 'Cancelled' ? 'color: white; background-color: pink;' :
                                    order.status === 'Return_Request' ? 'color: black; background-color: yellow;' :
                                    order.status === 'Returned' ? 'color: white; background-color: red;' :
                                    'color: silver;' 
                                  %>">
                                    <%= order.status.toUpperCase() %>
                                  </span>
                                  
                                  
                                     
                                </td>
                         
                                <td>
                                    <div style="display: flex; flex-direction: column; gap: 8px;">
                                        <a href="/admin/orders/<%= order._id %>" 
                                           class="btn btn-primary btn-sm" 
                                           style="background-color: #009879; color: #2c3e50; width: 160px; height: 40px;">
                                           <i  style="font-size: 15px; "> Details</i>
                                        </a>
                                
                                        <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Returned' && order.status !== 'Return_Request') { %>
                                            <button onclick="updateStatus('<%= order._id %>')" 
                                                style="background-color: #71C6B6; color: #2c3e50; width: 160px; height: 40px; font-size: 20px; color: white;">
                                                Update
                                            </button>
                                
                                            <button onclick="cancelOrder('<%= order._id %>')" 
                                                class="btn btn-primary btn-sm" 
                                                style="background-color: pink; color: #2c3e50; width: 160px; height: 40px;">
                                                
                                                Cancel

                                            </button>
                                        <% } %>
                                    </div>
                                </td>

                                
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<%
  const filteredStatus = (status.includes('all') || status.length === 0) ? [] : status;
  const statusParam = filteredStatus.join('&status=');
%>


<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <!-- Previous Button -->
        <% if (currentPage > 1) { %>
            <li class="page-item">
            
           
              <a class="page-link" 
              href="?page=<%= currentPage - 1 %>
              &search=<%= encodeURIComponent(search) %>
              <% if (statusParam) { %>&status=<%= statusParam %><% } %>
              &fromDate=<%= fromDate %>
              &toDate=<%= toDate %>">
              Previous
            </a>

              

                       </li>
        <% } else { %>
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        <% } %>

 
        <!-- Page Numbers -->
          <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                <a class="page-link" 
                  href="?page=<%= i %>
                  &search=<%= encodeURIComponent(search) %>
                  <% if (statusParam) { %>&status=<%= statusParam %><% } %>
                  &fromDate=<%= fromDate %>
                  &toDate=<%= toDate %>">
                  <%= i %>
                </a>
            </li>
          <% } %>


        <!-- Next Button -->
        <% if (currentPage < totalPages) { %>
            <li class="page-item">
        
              
              <a class="page-link" 
                href="?page=<%= currentPage + 1 %>
                &search=<%= encodeURIComponent(search) %>
                <% if (statusParam) { %>&status=<%= statusParam %><% } %>
                &fromDate=<%= fromDate %>
                &toDate=<%= toDate %>">
                Next
              </a>

                       </li>
        <% } else { %>
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
        <% } %>
    </ul>
</nav>

<br>
<br>    

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<script>


document.addEventListener('DOMContentLoaded', function () {

  const checkboxes = document.querySelectorAll('input[name="status[]"]');
  const allCheckbox = document.querySelector('input[value="all"]');
  const searchInput = document.querySelector('input[name="search"]');
  const clearSearchButton = document.querySelector('#clearSearch');
 
  const fromDateInput = document.querySelector('input[name="fromDate"]');
  const toDateInput = document.querySelector('input[name="toDate"]');

  const savedStatuses = JSON.parse(localStorage.getItem('selectedStatuses')) || [];
  const savedSearch = localStorage.getItem('searchQuery') || ''; // Restore last search value



  checkboxes.forEach((checkbox) => {
    checkbox.checked = savedStatuses.includes(checkbox.value.toLowerCase());
  });

  if (searchInput) {  searchInput.value = savedSearch; }

//   if (fromDateInput) fromDateInput.value = savedFromDate;
//   if (toDateInput) toDateInput.value = savedToDate;

  // Handle checkbox change events
  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener('change', function () {

      if (this.value === 'all' && this.checked) {
        checkboxes.forEach((cb) => {
          if (cb.value !== 'all') cb.checked = false;
        });
      } else {

        const otherCheckboxesChecked = Array.from(checkboxes)
          .filter(cb => cb.value !== 'all')
          .some(cb => cb.checked);
        if (!otherCheckboxesChecked) {
          allCheckbox.checked = true;
        } else if (this.checked === false && !otherCheckboxesChecked) {
          allCheckbox.checked = true; 
        } else {
          allCheckbox.checked = false; 
        }
      }

      // 🔁 Save updated status to localStorage
      const selectedValues = Array.from(checkboxes)
        .filter((cb) => cb.checked)
        .map((cb) => cb.value.toLowerCase());
      localStorage.setItem('selectedStatuses', JSON.stringify(selectedValues));

      triggerFilter()
    });
  });


  let debounceTimeout;
  if (searchInput) {
    searchInput.addEventListener('input', function () {

      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => {
        triggerFilter();
        searchInput.focus();
      }, 1000);
    });
  }

    // Add change event listeners for date inputs
    if (fromDateInput) {
        fromDateInput.addEventListener('change', function () {
        fromDate = fromDateInput.value;
        triggerFilter();
        });
    }

    if (toDateInput) {
        toDateInput.addEventListener('change', function () {
        toDate = toDateInput.value;
        triggerFilter();
        });
    }


    function triggerFilter() {
    const filterBtn = document.getElementById('filterBtn');
    if (filterBtn) {
        filterBtn.click(); 
    }
    }

  // Filter button click handler
  $("#filterBtn").on("click", function () {
    const selectedStatuses = [];
    $("input[name='status[]']:checked").each(function () {
      selectedStatuses.push($(this).val());
    });


    var searchQuery = searchInput ? searchInput.value : '';
    var fromDate = fromDateInput ? fromDateInput.value : '';
    var toDate = toDateInput ? toDateInput.value : '';


    const params = new URLSearchParams({
      search: searchQuery,
      fromDate: fromDate,
      toDate: toDate,
    });

    if (selectedStatuses.includes('all')) {
      params.append('status', 'all'); 
    } else {
      selectedStatuses.forEach((status) => {
        params.append('status', status);
      });
    }

    localStorage.setItem('searchQuery', searchQuery);
    // localStorage.setItem('fromDate', fromDate);
    // localStorage.setItem('toDate', toDate);


    window.location.href = "/admin/orders?" + params.toString();
  });

  // Clear search button handler
  if (clearSearchButton) {
    clearSearchButton.addEventListener('click', function () {
      if (searchInput) {
        searchInput.value = ''; 
        triggerFilter();
      }
    });
  }
});


    async function updateStatus(orderId) {
        const { value: status } = await Swal.fire({
            title: 'Update Order Status',
            input: 'select',
            inputOptions: {
                'Pending': 'Pending',
                'Confirmed': 'Confirmed',
                'Shipped': 'Shipped',
                'Delivered': 'Delivered'
            },
            inputPlaceholder: 'Select status',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to select a status!';
                }
            }
        });

        if (status) {
            try {
                const response = await fetch('/admin/orders/update-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, status }),
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order status updated successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update status'
                });
            }
        }
    }

    async function cancelOrder(orderId) {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/admin/orders/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId }),
                });

                const data = await response.json();
                
                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Order cancelled successfully',
                        timer: 1500
                    });
                    location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to cancel order'
                });
            }
        }
    }




</script>

<%- include('../partials/admin/footer') %>